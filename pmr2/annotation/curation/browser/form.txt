=================
Curation Overview
=================

The curation module provides site managers the ability to curate (grade)
the contents within the sites using curation flags.  Curation flags are
essentially tags with values that can be selected, with an optional
method to determine the value to assign to the item to be curated.

As users generally do not write code that can be executed on the server
(for the automated curation to happen), specialized modules will provide
the automatic curation flags.  For those, the reviewer would check the
applicable flags to assign to the item, then the curation process would
select the intended value to apply to that item for that flag.

The other part allows manual curation, where the reviewer would use the
curation flags defined by the site managers to apply to the curated
items.  This may prove to be the more common usage.

-----
Forms
-----

We should have a curation utility defined as the test class should have
initiated the installation of this module; the utility can be queried
by its interface.
::

    >>> from zope.component import getUtility
    >>> from pmr2.annotation.curation.interfaces import ICurationTool
    >>> tool = getUtility(ICurationTool)
    >>> tool
    <pmr2.annotation.curation.tool.CurationToolAnnotation ...>

The tool stores all the custom flags a site manager may wish to define
for a site.  There is a form to let them do this.
::

    >>> from pmr2.annotation.curation.browser.form import *
    >>> from z3c.form.testing import TestRequest
    >>> request = TestRequest()
    >>> form = CurationFlagAddForm(self.portal, request)
    >>> result = form()
    >>> 'Title' in result
    True
    >>> 'Description' in result
    True

As the fields in the form are present, post the creation request.
::

    >>> request = TestRequest(
    ...     form={
    ...         'form.widgets.id': u'flag_1',
    ...         'form.widgets.title': u'Flag 1',
    ...         'form.widgets.description': u'Test flag one',
    ...         'form.buttons.add': 1,
    ...     })
    >>> form = CurationFlagAddForm(self.portal, request)
    >>> result = form()
    >>> flag = tool.getFlag('flag_1')
    >>> flag.title
    u'Flag 1'
    >>> flag.description
    u'Test flag one'
    >>> request.response.getHeader('Location')
    'http://nohost/plone/@@manage-edit-curation-flag/flag_1'

So when the browser is redirected to the manage curation view, the new
flag should be listed.
::

    >>> request = TestRequest()
    >>> form = CurationToolDisplayForm(self.portal, request)
    >>> result = form()
    >>> 'Flag 1' in result
    True

To assign the values to the flag, there is an edit form for that.  We
need to simulate the traversal as the form implements IPublishTraverse,
with the flag id appended to the end of the URI.
::

    >>> request = TestRequest()
    >>> form = CurationFlagEditForm(self.portal, request)
    >>> form.publishTraverse(request, 'flag_1')
    <pmr2.annotation.curation.browser.form.CurationFlagEditForm ...>
    >>> result = form()
    >>> 'form.widgets.items' in result
    True

We can now assign some flags into the flag using the form.
::

    >>> item1 = u'Supported\nSuports feature provided by flag 1.'
    >>> item2 = u'Unsupported\nDoes not suport feature.'
    >>> items = '\n'.join([item1, item2])
    >>> request = TestRequest(
    ...     form={
    ...         'form.widgets.title': u'Flag 1',
    ...         'form.widgets.description': u'Test flag one',
    ...         'form.widgets.items': items,
    ...         'form.buttons.apply': 1,
    ...     })
    >>> form = CurationFlagEditForm(self.portal, request)
    >>> form.publishTraverse(request, 'flag_1')
    <pmr2.annotation.curation.browser.form.CurationFlagEditForm ...>
    >>> result = form()
    >>> answer = {
    ...     u'Supported': 'Suports feature provided by flag 1.',
    ...     u'Unsupported': 'Does not suport feature.'
    ...     }
    >>> flag.items == answer
    True

We also need to make sure the text from the new value is propagated back
into the form.
::

    >>> request = TestRequest()
    >>> form = CurationFlagEditForm(self.portal, request)
    >>> form.publishTraverse(request, 'flag_1')
    <pmr2.annotation.curation.browser.form.CurationFlagEditForm ...>
    >>> result = form()
    >>> item1 in result
    True
    >>> item2 in result
    True
