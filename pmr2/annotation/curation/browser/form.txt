=====
Forms
=====

These are the forms for the end users.

--------------
Basic Curation
--------------

Here we first set up the environment.
::

    >>> import zope.interface
    >>> import zope.component
    >>> from pmr2.testing.base import TestRequest
    >>> from pmr2.app.exposure.browser.browser import ExposureFileAnnotatorForm
    >>> from pmr2.app.exposure.browser.browser import ExposureFileNoteEditForm
    >>> from pmr2.app.exposure.browser.wizard import ExposureWizardForm
    >>> from pmr2.app.exposure.interfaces import IExposureWizard
    >>> self.markLayer()
    >>> context = self.portal.exposure['1']
    >>> ewiz = zope.component.getAdapter(context, IExposureWizard)

Adding a file to the wizard to begin.
::

    >>> request = TestRequest(form={
    ...     'form.buttons.add_file': 1,
    ... })
    >>> form = ExposureWizardForm(context, request)
    >>> form.update()
    >>> request = TestRequest(
    ...     form={
    ...         'file0.widgets.filetype': 'Curation Type',
    ...         'file0.widgets.filename': 'file2',
    ...         'file0.buttons.update': 1,
    ...     })
    >>> form = ExposureWizardForm(context, request)
    >>> result = form()

The form should render fine with the file added and the curation flags
readily be selected by the end user.
::

    >>> request = TestRequest()
    >>> form = ExposureWizardForm(context, request)
    >>> result = form()
    >>> 'annotate0.widgets.basic_curation.flags.widgets.correctness:list' in \
    ...     result
    True
    >>> 'annotate0.widgets.basic_curation.flags-empty-marker' in result
    True

Attempt to assign some curation values.
::

    >>> request = TestRequest(
    ...     form={
    ...         'annotate0.widgets.filename': 'file2',
    ...         'annotate0.widgets.basic_curation.flags-empty-marker': 1,
    ...         'annotate0.widgets.basic_curation.flags.widgets.correctness':
    ...             ['c1'],
    ...         'annotate0.widgets.basic_curation.flags.widgets.status':
    ...             ['c2'],
    ...         'annotate0.buttons.update': 1,
    ...     })
    >>> form = ExposureWizardForm(context, request)
    >>> result = form()
    >>> print result

Now find out how the wizard's structure have changed:
::

    >>> answer = [
    ...     ('file2', {
    ...         'file_type': '/plone/curation_type', 
    ...         'hidden_views': [],
    ...         'views': [(u'basic_curation', {
    ...             'flags': {
    ...                 'status': ['c2'],
    ...                 'correctness': ['c1'],
    ...                 'grading': None
    ...             }
    ...         })], 
    ...         'selected_view': None,
    ...         'Subject': []}),
    ...      ('', {
    ...         'commit_id': u'2', 'title': u'', 'curation': {},
    ...         'workspace': u'/plone/workspace/test',
    ...         'docview_gensource': None, 'docview_generator': None,
    ...         'Subject': ()})]
    ... ]
    >>> ewiz.structure == answer
    True

Render the form again, and it should have the curation flags selected.
Make use of the testbrowser to ease this task.
::

    >>> b = self.testbrowser
    >>> target = context.absolute_url() + '/@@wizard'
    >>> b.open(target)
    >>> b.getControl(name='annotate0.widgets.basic_curation.flags.widgets.'
    ...                   'status:list').value
    ['c2']
    >>> b.getControl(name='annotate0.widgets.basic_curation.flags.widgets.'
    ...                   'correctness:list').value
    ['c1']
    >>> b.getControl(name='annotate0.widgets.basic_curation.flags.widgets.'
    ...                   'grading:list').value
    ['--NOVALUE--']

Resubmitting this form directly should not cause an error.
::

    >>> b.getControl(name='annotate0.widgets.basic_curation.flags.widgets.'
    ...                   'status:list').value = ['c1']
    >>> b.getControl(name='annotate0.widgets.basic_curation.flags.widgets.'
    ...                   'correctness:list').value = ['c2']
    >>> b.getControl(name='annotate0.buttons.update').click()

Validate that the values have been changed.
::

    >>> b.open(target)
    >>> b.getControl(name='annotate0.widgets.basic_curation.flags.widgets.'
    ...                   'status:list').value
    ['c1']
    >>> b.getControl(name='annotate0.widgets.basic_curation.flags.widgets.'
    ...                   'correctness:list').value
    ['c2']
    >>> b.getControl(name='annotate0.widgets.basic_curation.flags.widgets.'
    ...                   'grading:list').value
    ['--NOVALUE--']

Let's push the build button and see if we got the desired result.
::

    >>> b.getControl(name='form.buttons.build').click()
    >>> note = zope.component.getAdapter(context.file2, name='basic_curation')
    >>> note.flags == {
    ...     'status': ['c1'],
    ...     'correctness': ['c2'],
    ...     'grading': [],
    ... }
    True

-----------
JSON Import
-----------

A user may have this imported via the JSON import form.  This will cause
the strict type checking to fail if that's not addressed as all values
will become unicode, which isn't a DottedValue.  To test that this will
not be a cause of error, we simulate this by setting the note with 
the wrong kind of values.
::

    >>> ewiz.structure[0][1]['views'][0][1]['flags'] = {
    ...     u'status': [u'c2'],
    ...     u'correctness': [u'c1'],
    ...     u'grading': None
    ... }

See that we can activate the update button without issues, and note that
all the unicode is reverted back into strings.
::

    >>> b.open(target)
    >>> b.getControl(name='annotate0.buttons.update').click()
    >>> 'Wrong contained type' in b.contents
    False
    >>> ewiz.structure[0][1]['views'][0][1]['flags'] == {
    ...     'status': ['c2'],
    ...     'correctness': ['c1'],
    ...     'grading': [],
    ... }
    True

Users may note that the flags are already correct and hit build right
away.  This should not result in any errors also.
::

    >>> ewiz.structure[0][1]['views'][0][1]['flags'] = {
    ...     u'status': [u'c3'],
    ...     u'correctness': [u'c2'],
    ...     u'grading': None
    ... }
    >>> b.open(target)
    >>> b.getControl(name='form.buttons.build').click()
    >>> note = zope.component.getAdapter(context.file2, name='basic_curation')
    >>> note.flags == {
    ...     'status': ['c3'],
    ...     'correctness': ['c2'],
    ...     'grading': [],
    ... }
    True

We can have a situation where we import curation flags from an external
repository with flags that are not defined here.  Emulate this situation
here with a mixture of missing flags and unknown flags.
::

    >>> ewiz.structure[0][1]['views'][0][1]['flags'] = {
    ...     u'power': [u'aa', u'bb'],
    ...     u'correctness': [u'c1'],
    ...     u'grading': [u'c6'],
    ... }

Now try to see what would happen if we just apply the update.
::

    >>> b.open(target)
    >>> b.getControl(name='annotate0.buttons.update').click()
    >>> 'Wrong contained type' in b.contents
    False
    >>> sorted(ewiz.structure[0][1]['views'][0][1]['flags'].items())
    [('correctness', ['c1']), ('grading', []), ('power', ['aa', 'bb']), 
    ('status', [])]

Basically any flags that do not exist at all in a given repository will 
be untouched, and any flags that share the same id will be modified with
the new set of flag values.  This may be an issue that will need to be
addressed in the future.
