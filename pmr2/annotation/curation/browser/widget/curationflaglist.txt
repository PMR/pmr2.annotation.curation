=========================
Curation Flag Dict Widget
=========================

This is currently reduced to a standard Object widget as it is possible
to dynamically instantiate an interface based on the defined curation
flags within the curation tool.  The following is kept for reference.

As for all widgets, the select widget must provide the new ``IWidget``
interface:
::

    >>> import zope.schema
    >>> from zope.interface import verify
    >>> from z3c.form.form import EditForm
    >>> from z3c.form.interfaces import IWidget
    >>> from z3c.form.widget import FieldWidget
    >>> from z3c.form.browser.object import ObjectWidget
    >>> from pmr2.annotation.curation.browser import widget
    >>> from pmr2.annotation.curation.browser.widget import interfaces
    >>> verify.verifyClass(IWidget, widget.CurationFlagListWidget)
    True
    >>> verify.verifyClass(interfaces.ICurationFlagListWidget,
    ...                    widget.CurationFlagListWidget)
    True

The widget can be instantiated only using the request:
::

    >>> from pmr2.testing.base import TestRequest
    >>> request = TestRequest()
    >>> w = widget.CurationFlagListWidget(request)

Manually assign the widget with some key attributes:
::

    >>> w.id = 'widget-id'
    >>> w.name = 'widget.name'

Try to assign a field at it and see what it will do.
::

    >>> field = zope.schema.Object(
    ...     title=u'Item', 
    ...     schema=zope.interface.Interface,
    ... )
    >>> w = FieldWidget(field, w)
    >>> w.update()

Let's see what a base rendering might look like:
::

    >>> print w.render()
    <div class="object-widget required">
        <input name="-empty-marker" type="hidden" value="1" />
    </div>

Now that the basic uninstantiated test out of the way, the curation tool
should be properly instantiated with some values for some actual work to
be done.  As the widget will resolve the correct schema, just supply the
widget with values it can provide and it should just work.
::

    >>> self.setUpCurationTool()
    >>> field = zope.schema.Object(
    ...     title=u'Item', 
    ...     schema=zope.interface.Interface,
    ... )
    >>> w = FieldWidget(field, w)
    >>> w.value = {
    ...     'status': ['c1'],
    ...     'grading': ['c0'],
    ...     'correctness': None,
    ... }
    >>> w.update()

Should be no problems there, so find out what this looks like:
::

    >>> print w.render()
    <div class="object-widget required">
      <div class="label">
        <label for="widgets-correctness">
          <span>Correctness</span>
        </label>
      </div>
      <div class="widget">
        <select id="widgets-correctness" name="widgets.correctness:list" 
                class="select-widget sequencechoice-field" size="1">
          <option id="widgets-correctness-novalue" value="--NOVALUE--" 
                  selected="selected">No value</option>
          <option id="widgets-correctness-0" value="c0">0 star</option>
          <option id="widgets-correctness-1" value="c1">1 star</option>
          <option id="widgets-correctness-2" value="c2">2 star</option>
          <option id="widgets-correctness-3" value="c3">3 star</option>
        </select>
        <input name="widgets.correctness-empty-marker" type="hidden" 
               value="1" />
      </div>
      <div class="label">
        <label for="widgets-grading">
          <span>Grading</span>
        </label>
      </div>
      <div class="widget">
        <select id="widgets-grading" name="widgets.grading:list" 
                class="select-widget sequencechoice-field" size="1">
          <option id="widgets-grading-novalue" 
                  value="--NOVALUE--">No value</option>
          <option id="widgets-grading-0" value="c0" 
                  selected="selected">0 star</option>
          <option id="widgets-grading-1" value="c1">1 star</option>
          <option id="widgets-grading-2" value="c2">2 star</option>
          <option id="widgets-grading-3" value="c3">3 star</option>
        </select>
        <input name="widgets.grading-empty-marker" type="hidden" value="1" />
      </div>
      <div class="label">
        <label for="widgets-status">
          <span>Curation Status</span>
        </label>
      </div>
      <div class="widget">
        <select id="widgets-status" name="widgets.status:list" 
                class="select-widget sequencechoice-field" size="1">
          <option id="widgets-status-novalue" 
                  value="--NOVALUE--">No value</option>
          <option id="widgets-status-0" value="c0">0 star</option>
          <option id="widgets-status-1" value="c1" 
                  selected="selected">1 star</option>
          <option id="widgets-status-2" value="c2">2 star</option>
          <option id="widgets-status-3" value="c3">3 star</option>
        </select>
        <input name="widgets.status-empty-marker" type="hidden" value="1" />
      </div>
      <input name="-empty-marker" type="hidden" value="1" />
    </div>

Further tests needed on missing data, mismatch data (i.e. stored value
that are no longer present within the defined ranges), and extra fields.
